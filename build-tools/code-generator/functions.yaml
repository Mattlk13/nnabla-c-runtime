# Copyright (c) 2017 Sony Corporation. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# DO NOT EDIT THIS FILE BY HAND
# THIS FILE IS GENERATED FROM NNABLA.
#

Neural Network Layer:
  Affine:
    snake_name: affine
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
    outputs:
      y: {}
    uniq_name: Affine_i
    id: 0
  Convolution:
    snake_name: convolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      group:
        type: int64
    outputs:
      y: {}
    uniq_name: Convolution_iiIiIiIi
    id: 1
  DepthwiseConvolution:
    snake_name: depthwise_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      multiplier:
        type: int64
    outputs:
      y: {}
    uniq_name: DepthwiseConvolution_iiIiIiIi
    id: 2
  Deconvolution:
    snake_name: deconvolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      group:
        type: int64
    outputs:
      y: {}
    uniq_name: Deconvolution_iiIiIiIi
    id: 3
  DepthwiseDeconvolution:
    snake_name: depthwise_deconvolution
    inputs:
      x: {}
      weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      divisor:
        type: int64
    outputs:
      y: {}
    uniq_name: DepthwiseDeconvolution_iiIiIiIi
    id: 4
  MaxPooling:
    snake_name: max_pooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
      stride:
        type: Shape
      ignore_border:
        type: bool
      pad:
        type: Shape
    outputs:
      y: {}
    uniq_name: MaxPooling_iIiIBiI
    id: 5
  AveragePooling:
    snake_name: average_pooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
      stride:
        type: Shape
      ignore_border:
        type: bool
      pad:
        type: Shape
      including_pad:
        type: bool
    outputs:
      y: {}
    uniq_name: AveragePooling_iIiIBiIB
    id: 6
  GlobalAveragePooling:
    snake_name: global_average_pooling
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: GlobalAveragePooling
    id: 7
  SumPooling:
    snake_name: sum_pooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
      stride:
        type: Shape
      ignore_border:
        type: bool
      pad:
        type: Shape
    outputs:
      y: {}
    uniq_name: SumPooling_iIiIBiI
    id: 8
  Unpooling:
    snake_name: unpooling
    inputs:
      x: {}
    arguments:
      kernel:
        type: Shape
    outputs:
      y: {}
    uniq_name: Unpooling_iI
    id: 9
  Embed:
    snake_name: embed
    inputs:
      x0:
        template: TI
      w:
        parameter: true
    outputs:
      y: {}
    uniq_name: Embed
    id: 10
Neural Network Activation Functions:
  Sigmoid:
    snake_name: sigmoid
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Sigmoid
    id: 11
  Swish:
    snake_name: swish
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Swish
    id: 12
  Tanh:
    snake_name: tanh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Tanh
    id: 13
  ReLU:
    snake_name: relu
    inputs:
      x: {}
    arguments:
      inplace:
        type: bool
    outputs:
      y: {}
    uniq_name: ReLU_B
    id: 14
  LeakyReLU:
    snake_name: leaky_relu
    inputs:
      x: {}
    arguments:
      alpha:
        type: float
    outputs:
      y: {}
    uniq_name: LeakyReLU_f
    id: 15
  Softmax:
    snake_name: softmax
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: Softmax_i
    id: 16
  ELU:
    snake_name: elu
    inputs:
      x: {}
    arguments:
      alpha:
        type: double
    outputs:
      y: {}
    uniq_name: ELU_f
    id: 17
  SELU:
    snake_name: selu
    inputs:
      x: {}
    arguments:
      scale:
        type: double
      alpha:
        type: double
    outputs:
      y: {}
    uniq_name: SELU_ff
    id: 18
  CReLU:
    snake_name: crelu
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: CReLU_i
    id: 19
  CELU:
    snake_name: celu
    inputs:
      x: {}
    arguments:
      alpha:
        type: double
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: CELU_fi
    id: 20
  PReLU:
    snake_name: prelu
    inputs:
      x0: {}
      x1: {}
    arguments:
      base_axis:
        type: int64
    outputs:
      y: {}
    uniq_name: PReLU_i
    id: 21
Normalization:
  BatchNormalization:
    snake_name: batch_normalization
    inputs:
      x: {}
      beta: {}
      gamma: {}
      mean: {}
      variance: {}
    arguments:
      axes:
        type: repeated int64
      decay_rate:
        type: float
      eps:
        type: float
      batch_stat:
        type: bool
    outputs:
      y: {}
    uniq_name: BatchNormalization_iIffB
    id: 22
  MeanSubtraction:
    snake_name: mean_subtraction
    inputs:
      x: {}
      rmean: {}
      t: {}
    arguments:
      base_axis:
        type: int64
      update_running_mean:
        type: bool
    outputs:
      y: {}
    uniq_name: MeanSubtraction_iB
    id: 23
  ClipGradByValue:
    snake_name: clip_grad_by_value
    inputs:
      x: {}
      min: {}
      max: {}
    outputs:
      y: {}
    uniq_name: ClipGradByValue
    id: 121
  ClipGradByNorm:
    snake_name: clip_grad_by_norm
    inputs:
      x: {}
    arguments:
      clip_norm:
        type: float
      axes:
        type: repeated int64
    outputs:
      y: {}
    uniq_name: ClipGradByNorm_fiI
    id: 122
Reduction:
  Sum:
    snake_name: sum
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
      keep_dims:
        type: bool
    outputs:
      y: {}
    uniq_name: Sum_iIB
    id: 24
  Mean:
    snake_name: mean
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
      keep_dims:
        type: bool
    outputs:
      y: {}
    uniq_name: Mean_iIB
    id: 25
  Max:
    snake_name: max
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
      keep_dims:
        type: bool
    outputs:
      y: {}
    uniq_name: Max_iIB
    id: 26
  Min:
    snake_name: min
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
      keep_dims:
        type: bool
    outputs:
      y: {}
    uniq_name: Min_iIB
    id: 27
  Prod:
    snake_name: prod
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
      keep_dims:
        type: bool
    outputs:
      y: {}
    uniq_name: Prod_iIB
    id: 28
  ReduceSum:
    snake_name: reduce_sum
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ReduceSum
    id: 29
  ReduceMean:
    snake_name: reduce_mean
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ReduceMean
    id: 30
Arithmetic:
  Add2:
    snake_name: add2
    inputs:
      x0: {}
      x1: {}
    arguments:
      inplace:
        type: bool
    outputs:
      y: {}
    uniq_name: Add2_B
    id: 31
  BcAdd2:
    snake_name: bc_add2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: BcAdd2
    id: 32
  Sub2:
    snake_name: sub2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Sub2
    id: 33
  Mul2:
    snake_name: mul2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Mul2
    id: 34
  Div2:
    snake_name: div2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Div2
    id: 35
  Pow2:
    snake_name: pow2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Pow2
    id: 36
  AddScalar:
    snake_name: add_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: AddScalar_f
    id: 37
  MulScalar:
    snake_name: mul_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: MulScalar_f
    id: 38
  PowScalar:
    snake_name: pow_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: PowScalar_f
    id: 39
  RSubScalar:
    snake_name: r_sub_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: RSubScalar_f
    id: 40
  RDivScalar:
    snake_name: r_div_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: RDivScalar_f
    id: 41
  RPowScalar:
    snake_name: r_pow_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: RPowScalar_f
    id: 42
Logical:
  Sign:
    snake_name: sign
    inputs:
      x: {}
    arguments:
      alpha:
        type: float
    outputs:
      y: {}
    uniq_name: Sign_f
    id: 43
  Minimum2:
    snake_name: minimum2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Minimum2
    id: 44
  Maximum2:
    snake_name: maximum2
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Maximum2
    id: 45
  MinimumScalar:
    snake_name: minimum_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: MinimumScalar_f
    id: 46
  MaximumScalar:
    snake_name: maximum_scalar
    inputs:
      x: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: MaximumScalar_f
    id: 47
  LogicalAnd:
    snake_name: logical_and
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: LogicalAnd
    id: 48
  LogicalOr:
    snake_name: logical_or
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: LogicalOr
    id: 49
  LogicalXor:
    snake_name: logical_xor
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: LogicalXor
    id: 50
  Equal:
    snake_name: equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Equal
    id: 51
  NotEqual:
    snake_name: not_equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: NotEqual
    id: 52
  GreaterEqual:
    snake_name: greater_equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: GreaterEqual
    id: 53
  Greater:
    snake_name: greater
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Greater
    id: 54
  LessEqual:
    snake_name: less_equal
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: LessEqual
    id: 55
  Less:
    snake_name: less
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: Less
    id: 56
  LogicalAndScalar:
    snake_name: logical_and_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: bool
    outputs:
      y: {}
    uniq_name: LogicalAndScalar_B
    id: 57
  LogicalOrScalar:
    snake_name: logical_or_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: bool
    outputs:
      y: {}
    uniq_name: LogicalOrScalar_B
    id: 58
  LogicalXorScalar:
    snake_name: logical_xor_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: bool
    outputs:
      y: {}
    uniq_name: LogicalXorScalar_B
    id: 59
  EqualScalar:
    snake_name: equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: EqualScalar_f
    id: 60
  NotEqualScalar:
    snake_name: not_equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: NotEqualScalar_f
    id: 61
  GreaterEqualScalar:
    snake_name: greater_equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: GreaterEqualScalar_f
    id: 62
  GreaterScalar:
    snake_name: greater_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: GreaterScalar_f
    id: 63
  LessEqualScalar:
    snake_name: less_equal_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: LessEqualScalar_f
    id: 64
  LessScalar:
    snake_name: less_scalar
    inputs:
      x0: {}
    arguments:
      val:
        type: double
    outputs:
      y: {}
    uniq_name: LessScalar_f
    id: 65
  LogicalNot:
    snake_name: logical_not
    inputs:
      x0: {}
    outputs:
      y: {}
    uniq_name: LogicalNot
    id: 66
Math:
  Constant:
    snake_name: constant
    inputs: {}
    arguments:
      val:
        type: float
      shape:
        type: Shape
    outputs:
      y: {}
    uniq_name: Constant_fiI
    id: 67
  Abs:
    snake_name: abs
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Abs
    id: 68
  Exp:
    snake_name: exp
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Exp
    id: 69
  Log:
    snake_name: log
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Log
    id: 70
  Identity:
    snake_name: identity
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Identity
    id: 71
  BatchMatmul:
    snake_name: batch_matmul
    inputs:
      a: {}
      b: {}
    arguments:
      transpose_a:
        type: bool
      transpose_b:
        type: bool
    outputs:
      y: {}
    uniq_name: BatchMatmul_BB
    id: 72
  Round:
    snake_name: round
    inputs:
      x: {}
    arguments: {}
    outputs:
      y: {}
    uniq_name: Round_
    id: 73
  Sin:
    snake_name: sin
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Sin
    id: 173
  Cos:
    snake_name: cos
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Cos
    id: 174
  Tan:
    snake_name: tan
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Tan
    id: 175
  Sinh:
    snake_name: sinh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Sinh
    id: 176
  Cosh:
    snake_name: cosh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Cosh
    id: 177
  ASin:
    snake_name: asin
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ASin
    id: 178
  ACos:
    snake_name: acos
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ACos
    id: 179
  ATan:
    snake_name: atan
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ATan
    id: 180
  ASinh:
    snake_name: asinh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ASinh
    id: 181
  ACosh:
    snake_name: acosh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ACosh
    id: 182
  ATanh:
    snake_name: atanh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: ATanh
    id: 183
Array Manipulation:
  Concatenate:
    snake_name: concatenate
    inputs:
      x:
        variadic: true
        parameter: true
    arguments:
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: Concatenate_i
    id: 74
  Split:
    snake_name: split
    inputs:
      x: {}
    arguments:
      axis:
        type: int64
    outputs:
      y:
        variadic: true
        parameter: true
    uniq_name: Split_i
    id: 75
  Stack:
    snake_name: stack
    inputs:
      x:
        variadic: true
        parameter: true
    arguments:
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: Stack_i
    id: 76
  Slice:
    snake_name: slice
    inputs:
      x: {}
    arguments:
      start:
        type: repeated int64
      stop:
        type: repeated int64
      step:
        type: repeated int64
    outputs:
      y: {}
    uniq_name: Slice_iIiIiI
    id: 77
  Pad:
    snake_name: pad
    inputs:
      x: {}
    arguments:
      pad_width:
        type: repeated int64
      mode:
        type: string
        available_values:
        - constant
      constant_value:
        type: float
    outputs:
      y: {}
    uniq_name: Pad_iIif
    id: 123
  Transpose:
    snake_name: transpose
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
    outputs:
      y: {}
    uniq_name: Transpose_iI
    id: 78
  Broadcast:
    snake_name: broadcast
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
    outputs:
      y: {}
    uniq_name: Broadcast_iI
    id: 79
  OneHot:
    snake_name: one_hot
    inputs:
      x:
        template: TI
    arguments:
      shape:
        type: Shape
    outputs:
      output: {}
    uniq_name: OneHot_iI
    id: 80
  Flip:
    snake_name: flip
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
    outputs:
      y: {}
    uniq_name: Flip_iI
    id: 81
  Shift:
    snake_name: shift
    inputs:
      x: {}
    arguments:
      shifts:
        type: repeated int64
      border_mode:
        type: string
        available_values:
        - nearest
        - reflect
    outputs:
      y: {}
    uniq_name: Shift_iIi
    id: 82
  Reshape:
    snake_name: reshape
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
    outputs:
      y: {}
    uniq_name: Reshape_iI
    id: 83
  MatrixDiag:
    snake_name: matrix_diag
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: MatrixDiag
    id: 84
  MatrixDiagPart:
    snake_name: matrix_diag_part
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: MatrixDiagPart
    id: 85
Stochasticity:
  Dropout:
    snake_name: dropout
    inputs:
      x: {}
    arguments:
      p:
        type: double
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: Dropout_fi
    id: 86
  TopKData:
    snake_name: top_k_data
    inputs:
      x: {}
    arguments:
      k:
        type: int64
      abs:
        type: bool
      reduce:
        type: bool
      base_axis:
        type: int64
    outputs:
      y: {}
    uniq_name: TopKData_iBBi
    id: 87
  TopKGrad:
    snake_name: top_k_grad
    inputs:
      x: {}
    arguments:
      k:
        type: int64
      abs:
        type: bool
      base_axis:
        type: int64
    outputs:
      y: {}
    uniq_name: TopKGrad_iBi
    id: 88
  Rand:
    snake_name: rand
    inputs: {}
    arguments:
      low:
        type: float
      high:
        type: float
      shape:
        type: Shape
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: Rand_ffiIi
    id: 89
  Randint:
    snake_name: randint
    inputs: {}
    arguments:
      low:
        type: int64
      high:
        type: int64
      shape:
        type: Shape
      seed:
        type: int64
    outputs:
      y:
        template: TI
    uniq_name: Randint_iiiIi
    id: 90
  Randn:
    snake_name: randn
    inputs: {}
    arguments:
      mu:
        type: float
      sigma:
        type: float
      shape:
        type: Shape
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: Randn_ffiIi
    id: 91
  RandomCrop:
    snake_name: random_crop
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
      base_axis:
        type: int64
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: RandomCrop_iIii
    id: 92
  RandomFlip:
    snake_name: random_flip
    inputs:
      x: {}
    arguments:
      axes:
        type: repeated int64
      base_axis:
        type: int64
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: RandomFlip_iIii
    id: 93
  RandomShift:
    snake_name: random_shift
    inputs:
      x: {}
    arguments:
      shifts:
        type: repeated int64
      border_mode:
        type: string
        available_values:
        - nearest
        - reflect
      base_axis:
        type: int64
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: RandomShift_iIiii
    id: 94
  ImageAugmentation:
    snake_name: image_augmentation
    inputs:
      x: {}
    arguments:
      shape:
        type: Shape
      pad:
        type: Shape
      min_scale:
        type: float
      max_scale:
        type: float
      angle:
        type: float
      aspect_ratio:
        type: float
      distortion:
        type: float
      flip_lr:
        type: bool
      flip_ud:
        type: bool
      brightness:
        type: float
      brightness_each:
        type: bool
      contrast:
        type: float
      contrast_center:
        type: float
      contrast_each:
        type: bool
      noise:
        type: float
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: ImageAugmentation_iIiIfffffBBfBffBfi
    id: 95
Loss Functions:
  SigmoidCrossEntropy:
    snake_name: sigmoid_cross_entropy
    inputs:
      x:
        parameter: true
      target:
        template: TI
        parameter: true
    outputs:
      y: {}
    uniq_name: SigmoidCrossEntropy
    id: 96
  BinaryCrossEntropy:
    snake_name: binary_cross_entropy
    inputs:
      x: {}
      target: {}
    outputs:
      y: {}
    uniq_name: BinaryCrossEntropy
    id: 97
  SoftmaxCrossEntropy:
    snake_name: softmax_cross_entropy
    inputs:
      x:
        parameter: true
      target:
        template: TI
        parameter: true
    arguments:
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: SoftmaxCrossEntropy_i
    id: 98
  CategoricalCrossEntropy:
    snake_name: categorical_cross_entropy
    inputs:
      x:
        parameter: true
      target:
        template: TI
        parameter: true
    arguments:
      axis:
        type: int64
    outputs:
      y: {}
    uniq_name: CategoricalCrossEntropy_i
    id: 99
  SquaredError:
    snake_name: squared_error
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: SquaredError
    id: 100
  AbsoluteError:
    snake_name: absolute_error
    inputs:
      x0: {}
      x1: {}
    outputs:
      y: {}
    uniq_name: AbsoluteError
    id: 101
  HuberLoss:
    snake_name: huber_loss
    inputs:
      x0: {}
      x1: {}
    arguments:
      delta:
        type: float
    outputs:
      y: {}
    uniq_name: HuberLoss_f
    id: 102
  EpsilonInsensitiveLoss:
    snake_name: epsilon_insensitive_loss
    inputs:
      x0: {}
      x1: {}
    arguments:
      epsilon:
        type: float
    outputs:
      y: {}
    uniq_name: EpsilonInsensitiveLoss_f
    id: 103
  KLMultinomial:
    snake_name: kl_multinomial
    inputs:
      p: {}
      q: {}
    arguments:
      base_axis:
        type: int64
    outputs:
      D: {}
    uniq_name: KLMultinomial_i
    id: 104
Quantization Neural Network Layers:
  BinarySigmoid:
    snake_name: binary_sigmoid
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: BinarySigmoid
    id: 105
  BinaryTanh:
    snake_name: binary_tanh
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: BinaryTanh
    id: 106
  BinaryConnectAffine:
    snake_name: binary_connect_affine
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
    outputs:
      y: {}
    uniq_name: BinaryConnectAffine_i
    id: 107
  BinaryConnectConvolution:
    snake_name: binary_connect_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      group:
        type: int64
    outputs:
      y: {}
    uniq_name: BinaryConnectConvolution_iiIiIiIi
    id: 108
  BinaryWeightAffine:
    snake_name: binary_weight_affine
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      alpha:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
    outputs:
      y: {}
    uniq_name: BinaryWeightAffine_i
    id: 109
  BinaryWeightConvolution:
    snake_name: binary_weight_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      binary_weight:
        parameter: true
      alpha:
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      group:
        type: int64
    outputs:
      y: {}
    uniq_name: BinaryWeightConvolution_iiIiIiIi
    id: 110
  INQAffine:
    snake_name: inq_affine
    inputs:
      x: {}
      weight:
        parameter: true
      indicator_fixedweights:
        template: TI
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      num_bits:
        type: int64
      inq_iterations:
        type: repeated int64
      selection_algorithm:
        type: string
        available_values:
        - largest_abs
        - random
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: INQAffine_iiiIii
    id: 111
  INQConvolution:
    snake_name: inq_convolution
    inputs:
      x: {}
      weight:
        parameter: true
      indicator_fixedweights:
        template: TI
        parameter: true
      bias:
        optional: true
        parameter: true
    arguments:
      base_axis:
        type: int64
      pad:
        type: Shape
      stride:
        type: Shape
      dilation:
        type: Shape
      group:
        type: int64
      num_bits:
        type: int64
      inq_iterations:
        type: repeated int64
      selection_algorithm:
        type: string
        available_values:
        - largest_abs
        - random
      seed:
        type: int64
    outputs:
      y: {}
    uniq_name: INQConvolution_iiIiIiIiiiIii
    id: 112
  FixedPointQuantize:
    snake_name: fixed_point_quantize
    inputs:
      x: {}
    arguments:
      sign:
        type: bool
      n:
        type: int64
      delta:
        type: float
      ste_fine_grained:
        type: bool
    outputs:
      y: {}
    uniq_name: FixedPointQuantize_BifB
    id: 113
  Pow2Quantize:
    snake_name: pow2_quantize
    inputs:
      x: {}
    arguments:
      sign:
        type: bool
      with_zero:
        type: bool
      n:
        type: int64
      m:
        type: int64
      ste_fine_grained:
        type: bool
    outputs:
      y: {}
    uniq_name: Pow2Quantize_BBiiB
    id: 114
Validation:
  TopNError:
    snake_name: top_n_error
    inputs:
      x: {}
      target:
        template: TI
    arguments:
      axis:
        type: int64
      n:
        type: int64
    outputs:
      output: {}
    uniq_name: TopNError_ii
    id: 115
  BinaryError:
    snake_name: binary_error
    inputs:
      x: {}
      target: {}
    outputs:
      output: {}
    uniq_name: BinaryError
    id: 116
  ConfusionMatrix:
    snake_name: confusion_matrix
    inputs:
      x: {}
      target:
        template: TI
    arguments:
      axis:
        type: int64
    outputs:
      output: {}
    uniq_name: ConfusionMatrix_i
    id: 117
Unsupported, Special Use:
  VATNoise:
    snake_name: vat_noise
    inputs:
      x: {}
      w: {}
    arguments:
      base_axis:
        type: int64
      eps:
        type: float
    outputs:
      y: {}
    uniq_name: VATNoise_if
    id: 118
  Unlink:
    snake_name: unlink
    inputs:
      x: {}
    outputs:
      y: {}
    uniq_name: Unlink
    id: 119
  Sink:
    snake_name: sink
    inputs:
      x:
        variadic: true
    arguments:
      one_input_grad:
        type: bool
    outputs:
      y: {}
    uniq_name: Sink_B
    id: 120
  NmsDetection2d:
    snake_name: nms_detection2d
    inputs:
      x: {}
    arguments:
      thresh:
        type: float
      nms:
        type: float
      nms_per_class:
        type: bool
    outputs:
      y: {}
    uniq_name: NmsDetection2d_ffB
    id: 231
